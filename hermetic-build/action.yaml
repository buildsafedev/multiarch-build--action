name: Hermetic Builds
description: 'Hermetic Builds builds and pushes Docker images with a hermetic build process.'
inputs:
  oci_registry_username:
    description: 'OCI registry username'
    required: true
  oci_registry_password:
    description: 'OCI registry password'
    required: true
  image_name:
    description: 'Name of the Docker image'
    required: true
  tag:
    description: 'Tag of the Docker image'
    required: true
  directory:
    description: 'Directory where the Dockerfile is located'
    required: true
  platform:
    description: 'Platform to build the Docker image for'
    required: true
  base_image:
    description: 'Base image for the Docker image'
    required: true
  runtime_image:
    description: 'Runtime image for the Docker image'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to OCI Registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.oci_registry_username }}
        password: ${{ inputs.oci_registry_password }}

    - name: Set latest docker image
      shell: bash
      run: |
        sed -i "s|FROM .* AS build|FROM ${{ inputs.base_image }} AS build|g" ${{ inputs.directory }}/Dockerfile
        sed -i "s|FROM .* AS final|FROM ${{ inputs.runtime_image }} AS final|g" ${{ inputs.directory }}/Dockerfile

    - name: Set SOURCE_DATE_EPOCH
      shell: bash
      run: |
        echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

    - name: Build hermetic Docker image
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |        
        docker buildx create --name mybuilder --use --driver docker-container
        echo "SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"
        
        # Build the main image
        docker buildx build \
          --no-cache \
          --tag ${{ inputs.image_name }}:${{ inputs.tag }} \
          --build-arg SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH \
          --network=none \
          --attest type=provenance,mode=max \
          --platform=${{ inputs.platform }} \
          --output type=oci,dest=${{ inputs.tag }} \
          .
        echo "Build completed successfully"

        mkdir -p ${{ inputs.tag }}-extracted
        tar -xvf ${{ inputs.tag }} -C ${{ inputs.tag }}-extracted
        ls -l ${{ inputs.tag }}-extracted
      
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Check Nixpkgs inputs
      uses: DeterminateSystems/flake-checker-action@main
      with:
        fail-mode: true
        flake-lock-path: ${{ inputs.directory }}/bsf/flake.lock

    - name: Setup Nix development environment
      uses: nicknovitski/nix-develop@v1
      with:
        arguments: ./${{ inputs.directory }}/bsf/.#devShell
    
    - name : skopeo copy image
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
          skopeo copy oci:${{ inputs.tag }}-extracted  docker-daemon:${{ inputs.image_name}}:${{ inputs.tag }}
          docker images
    - name: Run tests
      shell: bash
      run: grype ${{ inputs.image_name }}:${{ inputs.tag }}