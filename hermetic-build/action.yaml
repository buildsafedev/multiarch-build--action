name: Hermetic Builds
description: 'Hermetic Builds builds and pushes Docker images with a hermetic build process.'
inputs:
  oci_registry_username:
    description: 'OCI registry username'
    required: true
  oci_registry_password:
    description: 'OCI registry password'
    required: true
  image_name:
    description: 'Name of the Docker image'
    required: true
  tag:
    description: 'Tag of the Docker image'
    required: true
  directory:
    description: 'Directory where the Dockerfile is located'
    required: true
  platform:
    description: 'Platform to build the Docker image for'
    required: true
  base_image:
    description: 'Base image for the Docker image'
    required: true
  runtime_image:
    description: 'Runtime image for the Docker image'
    required: true
  docker_buildx_no_cache:
    description: 'Whether to use the Docker buildx no cache option'
    required: false
    default: 'false'
  build_hermetic_image:
    description: 'Whether to build the hermetic Docker image'
    required: false
    default: 'false'
  cosign_password:
    description: 'Cosign password'
    required: false
  cosign_private_key:
    description: 'Cosign key'
    required: false
  cosign_public_key:
    description: 'Cosign public key'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to OCI Registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.oci_registry_username }}
        password: ${{ inputs.oci_registry_password }}

    - name: Set latest docker image
      shell: bash
      run: |
        sed -i "s|FROM .* AS build|FROM ${{ inputs.base_image }} AS build|g" ${{ inputs.directory }}/Dockerfile
        sed -i "s|FROM .* AS final|FROM ${{ inputs.runtime_image }} AS final|g" ${{ inputs.directory }}/Dockerfile

    - name: Set SOURCE_DATE_EPOCH
      shell: bash
      run: |
        echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

    - name: Build hermetic Docker image
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |        
        docker buildx create --name mybuilder --use --driver docker-container
        echo "SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"

        if [ "${{ inputs.docker_buildx_no_cache }}" == "true" ] && [ "${{ inputs.build_hermetic_image }}" == "true" ]; then
          # Build the main image
          docker buildx build \
            --no-cache \
            --tag ${{ inputs.image_name }}:${{ inputs.tag }} \
            --build-arg SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH \
            --network=none \
            --attest type=provenance,mode=min \
            --platform=${{ inputs.platform }} \
            --push \
            --output type=oci \
            .
          echo "Build completed successfully"
        fi

        if [ "${{ inputs.build_hermetic_image }}" == "true" ]; then
          # Build the main image
          docker buildx build \
            --tag ${{ inputs.image_name }}:${{ inputs.tag }} \
            --build-arg SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH \
            --network=none \
            --attest type=provenance,mode=min \
            --platform=${{ inputs.platform }} \
            --push \
            --output type=oci \
            .
          echo "Build completed successfully"
        fi

        if [ "${{ inputs.docker_buildx_no_cache }}" == "true" ]; then
          docker buildx build \
            --no-cache \
            --tag ${{ inputs.image_name }}:${{ inputs.tag }} \
            --build-arg SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH \
            --attest type=provenance,mode=min \
            --platform=${{ inputs.platform }} \
            --push \
            --output type=oci \
            .
          echo "Build completed successfully"
        fi
        
        
        if [ "${{ inputs.docker_buildx_no_cache }}" == "false" ] && [ "${{ inputs.build_hermetic_image }}" == "false" ]; then
          # Build the main image
          docker buildx build \
            --tag ${{ inputs.image_name }}:${{ inputs.tag }} \
            --build-arg SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH \
            --attest type=provenance,mode=min \
            --platform=${{ inputs.platform }} \
            --push \
            --output type=oci \
            .
          echo "Build completed successfully"
        fi
      
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Check Nixpkgs inputs
      uses: DeterminateSystems/flake-checker-action@main
      with:
        fail-mode: true
        flake-lock-path: ${{ inputs.directory }}/bsf/flake.lock

    - name: Setup Nix development environment
      uses: nicknovitski/nix-develop@v1
      with:
        arguments: ./${{ inputs.directory }}/bsf/.#devShell

    - name: Is hermetic build
      shell: bash
      run: |
        docker buildx imagetools inspect ${{ inputs.image_name }}:${{ inputs.tag }} --format "{{ json .Provenance.SLSA }}" > slsa.json
        cat slsa.json
        if [ "$(jq -r '.build.builder' slsa.json)" == "hermetic" ]; then
          echo "Hermetic build"
        else
          echo "Not hermetic build"
        fi
    
    - name: Check for vulnerabilities
      shell: bash
      run: grype ${{ inputs.image_name }}:${{ inputs.tag }}


    - name: Sign and push image
      shell: bash
      run: |
        if [ "${{ inputs.cosign_password }}" != "" ] && [ "${{ inputs.cosign_private_key }}" != "" ] && [ "${{ inputs.cosign_public_key }}" != "" ]; then
          export COSIGN_PASSWORD="${{ inputs.cosign_password }}"
          echo "${{ inputs.cosign_private_key }}" > cosign.key
          echo "${{ inputs.cosign_public_key }}" > cosign.pub
          cosign sign --yes --key cosign.key ${{ inputs.image_name }}:${{ inputs.tag }}
          cosign verify --key cosign.pub ${{ inputs.image_name }}:${{ inputs.tag }}
          cosign triangulate ${{ inputs.image_name }}:${{ inputs.tag }}
        else
          echo "Skipping signing and pushing image Make sure to provide cosign_password, cosign_private_key, and cosign_public_key"
        fi

    