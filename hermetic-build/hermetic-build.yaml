name : Hermetic Builds
description : `Hermetic Builds builds and pushes Docker images with a hermetic build process.`
inputs :
  oci_registry_username :
    description : `oci registry username`
    required : `true`
  oci_registry_password :
    description : `oci registry password`
    required : `true`
  image_name :
    description : `Name of the Docker image`
    required : `true`
  tag :
    description : `Tag of the Docker image`
    required : `true`
  directory :
    description : `Directory where the Dockerfile is located`
    required : `true`
  platform :
    description : `Platform to build the Docker image for`
    required : `true`
  base_image :
    description : `Base image for the Docker image`
    required : `true`
  runtime_image :
    description : `Runtime image for the Docker image`
    required : `true`

jobs:
  build-hermetic:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to OCI Registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.oci_registry_username }}
        password: ${{ inputs.oci_registry_password }}

    - name: Set latest docker image
      run: |
        sed -i "s|FROM .* AS build|FROM ${{ inputs.base_image }} AS build|g" ${{ inputs.directory }}/Dockerfile
        sed -i "s|FROM .* AS final|FROM ${{ inputs.runtime_image }} AS final|g" ${{ inputs.directory }}/Dockerfile

    - name: Set SOURCE_DATE_EPOCH
      run: |
        echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

    - name: Build hermetic Docker image
      run: |
        set -euo pipefail
        
        echo "SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"
        
        # Build the main image
        docker buildx build \
          --no-cache \
          --output type=docker \
          --tag ${{ inputs.image_name }}:${{ inputs.tag }} \
          --build-arg SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH \
          --network=none \
          --platform=${{ inputs.platform }} \
          ${{ inputs.directory }}
        
        echo "Build completed successfully"

    - name: Verify hermetic build
      run: |
        set -euo pipefail
        
        # Check build timestamp 
        build_time=$(docker inspect ${{ inputs.image_name }}:${{ inputs.tag }} --format '{{.Created}}')
        source_date=$(date -d @$SOURCE_DATE_EPOCH --utc +"%Y-%m-%dT%H:%M:%S")
        
        echo "Build time: $build_time"
        echo "Source date: $source_date"
        
        if [[ "$build_time" != "${source_date}"* ]]; then
          echo "Build is not hermetic. Build time does not match SOURCE_DATE_EPOCH."
          exit 1
        fi
        
        # Check for network isolation during build #TODO improve this check
        if docker history ${{ inputs.image_name }}:${{ inputs.tag }} | grep -q 'curl\|wget\|apt-get\|yum\|dnf'; then
          echo "Network isolation check failed. The build may have had network access."
          exit 1
        fi

        echo "Build is hermetic. Build time matches SOURCE_DATE_EPOCH and no obvious network access was detected during build."

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: scan for vulnerabilities
      run: |
        nix run nixpkgs#grype ${{ inputs.image_name }}:${{ inputs.tag }}
